using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Newtonsoft.Json;
using System.Xml;

namespace OBodyMerger
{
    public class OBodyMerger
    {
        static Lazy<Settings> settings = null!;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "OBodyMerger.esp")
                .SetAutogeneratedSettings(
                    nickname: "OBodyMerger Settings",
                    path: "obodymerge.json",
                    out settings)
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            OutputTemplate output = new();
            string SKSEPluginDir = Path.Combine(state.DataFolderPath, "SKSE", "Plugins");
            if (!Directory.Exists(SKSEPluginDir))
            {
                Directory.CreateDirectory(SKSEPluginDir);
            }
            string presetSourceDir = Path.Combine(state.DataFolderPath, "CalienteTools", "BodySlide", "SliderPresets");
            string presetDestinationDir = Path.Combine(SKSEPluginDir, "OBodyPresets");
            if (!Directory.Exists(presetDestinationDir))
            {
                Directory.CreateDirectory(presetDestinationDir);
            }
            if (settings.Value.GenerateJSONForTemplates)
            {
                if (Directory.Exists(presetSourceDir))
                {
                    foreach (string xml in Directory.GetFiles(presetSourceDir).Where(f => Path.GetExtension(f) == ".xml"))
                    {
                        string dest = Path.Combine(presetDestinationDir, $"{Path.GetFileNameWithoutExtension(xml)}.json");
                        if (File.Exists(dest))
                        {
                            continue;
                        }
                        Console.WriteLine($"Generating preset file {Path.GetFileName(xml)}");
                        XmlDocument xmlDocument = new XmlDocument();
                        xmlDocument.LoadXml(File.ReadAllText(xml));
                        PresetTemplate preset = PresetTemplate.FromXml(xmlDocument);
                        File.WriteAllText(dest, JsonConvert.SerializeObject(preset, Newtonsoft.Json.Formatting.Indented));
                    }
                }
            }
            foreach (string presetFile in Directory.GetFiles(presetDestinationDir).Where(f => Path.GetExtension(f) == ".json"))
            {
                Console.WriteLine($"Processing preset file {Path.GetFileName(presetFile)}");
                PresetTemplate? preset = JsonConvert.DeserializeObject<PresetTemplate>(File.ReadAllText(presetFile));
                if (preset == null) continue;
                output.AddAll(preset);
            }
            string templateDir = Path.Combine(SKSEPluginDir, "OBodyTemplate");
            if (!Directory.Exists(templateDir))
            {
                Directory.CreateDirectory(templateDir);
            }
            foreach (string jsonFile in Directory.GetFiles(templateDir).Where(f => Path.GetExtension(f) == ".json"))
            {
                Console.WriteLine($"Processing {Path.GetFileName(jsonFile)}");
                OutputTemplate outputCurrent = OutputTemplate.FromFile(File.ReadAllText(jsonFile));
                output.AddAll(outputCurrent);
            }
            output.ShowBlacklistedInMenu = settings.Value.ShowBlacklistedPresetsInRefitMenu;
            File.WriteAllText(Path.Combine(SKSEPluginDir, "OBody_presetDistributionConfig.json"), JsonConvert.SerializeObject(output, Newtonsoft.Json.Formatting.Indented));
        }
    }
}
